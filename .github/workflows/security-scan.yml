name: Security Scan with Trivy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker-compose.yml'
      - 'Dockerfile'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker-compose.yml'
      - 'Dockerfile'
  schedule:
    # Ejecutar an√°lisis de seguridad diariamente a las 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  TRIVY_VERSION: '0.50.0'

jobs:
  trivy-scan:
    name: Security Scan with Trivy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Run Trivy vulnerability scanner on SonarQube image
      run: |
        echo "üîç Scanning SonarQube image for vulnerabilities..."
        trivy image sonarqube:latest --severity HIGH,CRITICAL --format table --exit-code 0
        echo ""
        echo "üìä Detailed vulnerability report:"
        trivy image sonarqube:latest --format json --output sonarqube-vulnerabilities.json

    - name: Run Trivy vulnerability scanner on PostgreSQL image
      run: |
        echo "üîç Scanning PostgreSQL image for vulnerabilities..."
        trivy image postgres:13 --severity HIGH,CRITICAL --format table --exit-code 0
        echo ""
        echo "üìä Detailed vulnerability report:"
        trivy image postgres:13 --format json --output postgres-vulnerabilities.json

    - name: Run Trivy filesystem scan (if Dockerfile exists)
      run: |
        if [ -f "Dockerfile" ]; then
          echo "üîç Scanning filesystem for vulnerabilities..."
          trivy fs . --severity HIGH,CRITICAL --format table --exit-code 0
          echo ""
          echo "üìä Detailed filesystem scan report:"
          trivy fs . --format json --output filesystem-vulnerabilities.json
        else
          echo "‚ÑπÔ∏è No Dockerfile found, skipping filesystem scan"
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          sonarqube-vulnerabilities.json
          postgres-vulnerabilities.json
          filesystem-vulnerabilities.json

    - name: Generate Security Report
      run: |
        echo "## üîí Security Scan Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Trivy Version:** ${{ env.TRIVY_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count vulnerabilities
        SONARQUBE_CRITICAL=$(trivy image sonarqube:latest --severity CRITICAL --format json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
        SONARQUBE_HIGH=$(trivy image sonarqube:latest --severity HIGH --format json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' | wc -l)
        
        POSTGRES_CRITICAL=$(trivy image postgres:13 --severity CRITICAL --format json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
        POSTGRES_HIGH=$(trivy image postgres:13 --severity HIGH --format json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' | wc -l)
        
        echo "### üìä Vulnerability Summary:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Image | Critical | High |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|----------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| SonarQube | $SONARQUBE_CRITICAL | $SONARQUBE_HIGH |" >> $GITHUB_STEP_SUMMARY
        echo "| PostgreSQL | $POSTGRES_CRITICAL | $POSTGRES_HIGH |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üîç Detailed Reports:" >> $GITHUB_STEP_SUMMARY
        echo "- SonarQube vulnerabilities: Check the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- PostgreSQL vulnerabilities: Check the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- Filesystem vulnerabilities: Check the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### ‚ö†Ô∏è Recommendations:" >> $GITHUB_STEP_SUMMARY
        echo "1. Review critical and high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "2. Update base images to latest versions" >> $GITHUB_STEP_SUMMARY
        echo "3. Apply security patches regularly" >> $GITHUB_STEP_SUMMARY
        echo "4. Consider using distroless images for production" >> $GITHUB_STEP_SUMMARY

    - name: Comment PR with security scan results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const sonarqubeCritical = await exec('trivy image sonarqube:latest --severity CRITICAL --format json | jq ".Results[]?.Vulnerabilities[]? | select(.Severity == \"CRITICAL\") | .VulnerabilityID" | wc -l');
          const sonarqubeHigh = await exec('trivy image sonarqube:latest --severity HIGH --format json | jq ".Results[]?.Vulnerabilities[]? | select(.Severity == \"HIGH\") | .VulnerabilityID" | wc -l');
          const postgresCritical = await exec('trivy image postgres:13 --severity CRITICAL --format json | jq ".Results[]?.Vulnerabilities[]? | select(.Severity == \"CRITICAL\") | .VulnerabilityID" | wc -l');
          const postgresHigh = await exec('trivy image postgres:13 --severity HIGH --format json | jq ".Results[]?.Vulnerabilities[]? | select(.Severity == \"HIGH\") | .VulnerabilityID" | wc -l');
          
          const totalCritical = parseInt(sonarqubeCritical.stdout.trim()) + parseInt(postgresCritical.stdout.trim());
          const totalHigh = parseInt(sonarqubeHigh.stdout.trim()) + parseInt(postgresHigh.stdout.trim());
          
          let status = "‚úÖ";
          let message = "No critical vulnerabilities found";
          
          if (totalCritical > 0) {
            status = "üö®";
            message = `${totalCritical} critical vulnerabilities found`;
          } else if (totalHigh > 0) {
            status = "‚ö†Ô∏è";
            message = `${totalHigh} high severity vulnerabilities found`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üîí **Security Scan Results**
            
            ${status} **${message}**
            
            **Vulnerability Summary:**
            - SonarQube: ${sonarqubeCritical.stdout.trim()} critical, ${sonarqubeHigh.stdout.trim()} high
            - PostgreSQL: ${postgresCritical.stdout.trim()} critical, ${postgresHigh.stdout.trim()} high
            
            **Total:** ${totalCritical} critical, ${totalHigh} high severity vulnerabilities
            
            üìä **Detailed Report:** Check the Security tab for complete vulnerability details
            
            üîç **Recommendations:**
            - Review critical vulnerabilities immediately
            - Update base images to latest versions
            - Apply security patches regularly`
          });

    - name: Fail build on critical vulnerabilities
      run: |
        echo "üîç Checking for critical vulnerabilities..."
        SONARQUBE_CRITICAL=$(trivy image sonarqube:latest --severity CRITICAL --format json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
        POSTGRES_CRITICAL=$(trivy image postgres:13 --severity CRITICAL --format json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
        
        TOTAL_CRITICAL=$((SONARQUBE_CRITICAL + POSTGRES_CRITICAL))
        
        if [ $TOTAL_CRITICAL -gt 0 ]; then
          echo "üö® Found $TOTAL_CRITICAL critical vulnerabilities!"
          echo "Please review and fix critical vulnerabilities before merging."
          exit 1
        else
          echo "‚úÖ No critical vulnerabilities found"
        fi
